type Comment {
  created_at: DateTime
  id: ID!
  post_id: ID
  text: String
  username: String
}

type Post {
  body: String
  created_at: DateTime
  id: ID!
  image: String
  subcuddit_id: ID
  title: String
  username: String
  comments: [Comment]
    @materializer(
      query: "getCommentsByPostId"
      arguments: [{ name: "post_id", field: "id" }]
    )
  votes: [Vote]
    @materializer(
      query: "getVotesByPostId"
      arguments: [{ name: "post_id", field: "id" }]
    )
  subcuddit: [Subcuddit]
    @materializer(
      query: "getSubcudditListById"
      arguments: [{ name: "id", field: "subcuddit_id" }]
    )
}

type Subcuddit {
  created_at: DateTime
  id: ID!
  topic: String
}

type Vote {
  created_at: DateTime
  id: ID!
  post_id: ID
  upvote: Int
  username: String
}

type Query {
  getCommentList: [Comment]
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "comment"
      configuration: "postgresql_config"
    )
  """
  This query for getting comment by post_id
  """
  getCommentsByPostId(post_id: ID!): [Comment]
    @dbquery(
      type: "postgresql"
      query: """
      select * from "comment" where "post_id" = $1
      """
      configuration: "postgresql_config"
    )
  """
  This query for getting vote by post_id
  """
  getVotesByPostId(post_id: ID!): [Vote]
    @dbquery(
      type: "postgresql"
      query: """
      select * from "vote" where "post_id" = $1
      order by "created_at" desc
      """
      configuration: "postgresql_config"
    )
  """
  This query for getting subcuddit by subcuddit_id
  """
  getSubcudditListById(id: ID!): [Subcuddit]
    @dbquery(
      type: "postgresql"
      query: """
      select * from "subcuddit" where "id" = $1
      """
      configuration: "postgresql_config"
    )
  """
  This query is an example of how to simply paginate your responses.
  """
  getPaginatedCommentList(first: Int!, after: Int!): [Comment]
    @dbquery(
      type: "postgresql"
      query: """
      select * from "public"."comment" limit $1 offset $2
      """
      configuration: "postgresql_config"
    )
  """
  In this example, a single query parameter is passed. If the request to the DB will
  return at most one value you can remove the square brackets from the result.
  """
  getCommentByPost_id(post_id: ID!): [Comment]
    @dbquery(
      type: "postgresql"
      query: """
      select * from "public"."comment" where "post_id" = $1
      """
      configuration: "postgresql_config"
    )
  """
  In this example, two query parameters are passed. If the request to the DB will
  return at most one value you can remove the square brackets from the result.
  """
  getCommentByPost_idAndUsername(post_id: ID!, username: String!): [Comment]
    @dbquery(
      type: "postgresql"
      query: """
      select * from "public"."comment" where "post_id" = $1 and "username" = $2
      """
      configuration: "postgresql_config"
    )
  getPostByPostID(post_id: ID!): [Post]
    @dbquery(
      type: "postgresql"
      query: """
      select * from "post"
      where "post"."id" = $1
      """
      configuration: "postgresql_config"
    )
  getPostList: [Post]
    @dbquery(
      type: "postgresql"
      query: """
      select * from "post"
      order by "post"."created_at" desc
      """
      configuration: "postgresql_config"
    )
  getPostListByTopic(topic: String!): [Post]
    @dbquery(
      type: "postgresql"
      query: """
      select *, "post".id as id from "post"
      join "subcuddit" on "subcuddit"."id" = "post"."subcuddit_id"
      where "subcuddit"."topic" = $1
      order by "post"."created_at" desc
      """
      configuration: "postgresql_config"
    )
  getSubcudditListByTopic(topic: String!): [Subcuddit]
    @dbquery(
      type: "postgresql"
      query: """
      select * from "subcuddit" where "topic" = $1
      """
      configuration: "postgresql_config"
    )
  getSubcudditList: [Subcuddit]
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "subcuddit"
      configuration: "postgresql_config"
    )
  getVoteList: [Vote]
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "vote"
      configuration: "postgresql_config"
    )
}

type Mutation {
  """
  In this mutation example you can see how to do a mutation to insert data in the database.
  """
  insertSubCuddit(topic: String!): Subcuddit
    @dbquery(
      type: "postgresql"
      table: "subcuddit"
      dml: INSERT
      configuration: "postgresql_config"
    )
  insertPost(
    image: String!
    body: String!
    subcuddit_id: ID!
    title: String!
    username: String!
  ): Post
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "post"
      dml: INSERT
      configuration: "postgresql_config"
    )
  """
  In this mutation example you can see how to do a mutation to delete data from the database.
  """
  deletePost(
    image: String!
    created_at: DateTime!
    id: ID!
    body: String!
    subcuddit_id: ID!
    title: String!
    username: String!
  ): Post
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "post"
      dml: DELETE
      configuration: "postgresql_config"
    )
}
